// MyButton.cpp : 实现文件
//

#include "stdafx.h"
#include "MyButton.h"
#include "resource.h"

CMyButton::CMyButton(void)
{
	m_DownColor = m_UpColor = RGB(0,0,0);
	m_bMouseOn = false;
}
CMyButton::~CMyButton(void)
{
}

//CMyButton是CButton派生类，具有CButton的全部成员函数，
//但在创建时需要使用BS_OWNERDRAW风格。
//如果按钮不是动态生成，使用Attach函数使CMyButton代替原来按钮的窗口过程。
BOOL CMyButton::Attach(const UINT nID, CWnd* pParent)
{
	//GetDlgItem(nID)->ModifyStyle(0,BS_OWNERDRAW,0);
	if (!SubclassDlgItem(nID, pParent))
		return FALSE;
	return TRUE;
}
void CMyButton::SetDownColor(COLORREF color)
{
	m_DownColor = color;
}
void CMyButton::SetUpColor(COLORREF color)
{
	m_UpColor = color;
}

void CMyButton::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct)
{
	// TODO: Add your code to draw the specified item
	CDC dc;
	dc.Attach(lpDrawItemStruct->hDC);//得到绘制的设备环境CDC
	VERIFY(lpDrawItemStruct->CtlType==ODT_BUTTON);

	// 得当Button上文字,这里的步骤是:1,先得到在资源里编辑的按钮的文字,
	//然后将此文字重新绘制到按钮上,
	//同时将此文字的背景色设为透明,这样,按钮上仅会显示文字
	const int bufSize = 512;
	TCHAR buffer[bufSize];
	GetWindowText(buffer, bufSize);
	int size=lstrlen(buffer);   //得到长度
	DrawText(lpDrawItemStruct->hDC,buffer,size,&lpDrawItemStruct->rcItem,DT_CENTER|DT_VCENTER|DT_SINGLELINE|DT_TABSTOP);   //绘制文字
	SetBkMode(lpDrawItemStruct->hDC,TRANSPARENT);   //透明
	//dc.SetTextColor(RGB(255,255,0));

	CBrush brush(m_UpColor); 

	CRect rc(lpDrawItemStruct->rcItem);
	
	/*dc.BeginPath();
	dc.MoveTo(rc.Height()/2,rc.Height()/2);
	dc.AngleArc(rc.Height()/2,rc.Height()/2,rc.Height()/2,90,180);

	dc.LineTo(rc.Width()-rc.Height()/2,rc.Height());
	dc.AngleArc(rc.Width()-rc.Height()/2,rc.Height()/2,rc.Height()/2,270,180);

	dc.LineTo(rc.Height()/2,0);
	dc.EndPath();
	CRgn rgn;
	rgn.CreateFromPath(&dc);
	dc.FillRgn(&rgn,&brush);*/
	
	dc.FillRect(&(lpDrawItemStruct->rcItem),&brush);//
	//因为这里进行了重绘,所以文字也要重绘

	if (lpDrawItemStruct->itemState &ODS_SELECTED)  //当按下按钮时的处理
	{//
		CBrush brush(m_DownColor);  
		dc.FillRect(&(lpDrawItemStruct->rcItem),&brush);

		dc.SetTextColor(RGB(0,0,255));
		
		DrawText(lpDrawItemStruct->hDC,buffer,size,&lpDrawItemStruct->rcItem,DT_CENTER|DT_VCENTER|DT_SINGLELINE|DT_TABSTOP);  
		SetBkMode(lpDrawItemStruct->hDC,TRANSPARENT);

	}
	else if (m_bMouseOn)  //当按下按钮时的处理
	{//

		dc.SetTextColor(RGB(0,255,255));

		DrawText(lpDrawItemStruct->hDC,buffer,size,&lpDrawItemStruct->rcItem,DT_CENTER|DT_VCENTER|DT_SINGLELINE|DT_TABSTOP);  
		SetBkMode(lpDrawItemStruct->hDC,TRANSPARENT);      
	}
	else                       //当按钮不操作或者弹起时
	{		
		
		dc.SetTextColor(RGB(150,150,150));
		DrawText(lpDrawItemStruct->hDC,buffer,size,&lpDrawItemStruct->rcItem,DT_CENTER|DT_VCENTER|DT_SINGLELINE|DT_TABSTOP);    
		SetBkMode(lpDrawItemStruct->hDC,TRANSPARENT);
	}
	
	dc.Detach();//
}
BEGIN_MESSAGE_MAP(CMyButton, CButton)
	ON_WM_MOUSEMOVE()
	ON_WM_MOUSELEAVE()
//	ON_WM_MOUSEHOVER()
END_MESSAGE_MAP()


void CMyButton::OnMouseMove(UINT nFlags, CPoint point)
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值
	
	
	if(!m_bMouseOn)
	{
		TRACKMOUSEEVENT   tme;  
		tme.cbSize = sizeof(TRACKMOUSEEVENT);  
		tme.dwFlags = TME_HOVER | TME_LEAVE;  
		tme.dwHoverTime = HOVER_DEFAULT;  
		tme.hwndTrack = m_hWnd;  
		_TrackMouseEvent(&tme);  

		m_bMouseOn = true;
		Invalidate(FALSE);
	}
	
	CButton::OnMouseMove(nFlags, point);
}


void CMyButton::OnMouseLeave()
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值
	
	if(m_bMouseOn)
	{
		m_bMouseOn = false;
		Invalidate(FALSE);
	}
	
	CButton::OnMouseLeave();
}

